---
import { Icon } from "astro-icon/components";
import "swiper/css";
// const { slides } = Astro.props;

/* GET LANG */
import { getI18N } from '../i18n';
const { currentLocale } = Astro;
const i18n = getI18N({currentLocale});

---

<style>

  .swiper {
    padding-left: var(--container-gap) !important;
    padding-right: var(--container-gap) !important;
  }

  .swiper-button-next,.swiper-button-prev{
    @apply cursor-pointer w-[1.4rem];

    svg{
      width: 100%;
      height: auto;
    }

  }

  .swiper-button-disabled {
    @apply cursor-not-allowed text-deep-blue-200;
  }

</style>

<!-- Slider main container -->
<div class="flex justify-end gap-2 ctr-pr translate-y-[-3rem] xg:translate-y-[-12rem]">
  <div class="swiper-button-prev">
    <Icon name="vector-left" />
  </div>
  <div class="swiper-button-next">
    <Icon name="vector-right" />
  </div>
</div>

<div class="swiper swiper-servicios">
  
  <div class="swiper-wrapper">
    {
      Object.entries(i18n.SERVICIOS).map(([key, slide]) => {
        return (
          <div class="swiper-slide" key={key}>
            <div class="card-service m-link" data-modal={slide.SLUG}>
              <h3>
                <Fragment set:html={slide.COOL_TITLE} />
              </h3>
              <div>
                <p>{slide.INTRO}</p>
                <div class="cta">
                  {i18n.WORDS.READMORE} &nbsp;<span>→</span>{" "}
                </div>
              </div>
            </div>
          </div>
        );
      })
    }
  </div>
  
</div>

<script>
  import Swiper from "swiper";
  import { Autoplay, Navigation } from "swiper/modules";

  function swiperSlider() {
    const swiperElement = document.querySelector(".swiper-servicios");

    const SwiperSlider = new Swiper(swiperElement, {
      modules: [Autoplay, Navigation],
      spaceBetween: 20,
      speed: 800,
      autoplay: {
        delay: 4000,
        disableOnInteraction: true,
      },
      navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev",
      },
      breakpoints: {
        0: {
          slidesPerView: 1.05,
        },
        768: {
          slidesPerView: 2.3,
        },
        1024: {
          slidesPerView: 3.05,
        },
      },
    });

    // Configuración del Intersection Observer
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            SwiperSlider.autoplay.start(); // Inicia el autoplay
            setTimeout(() => {
              SwiperSlider.slideTo(1);
            }, 1500);
          } else {
            SwiperSlider.autoplay.stop(); // Detiene el autoplay
          }
        });
      },
      {
        root: null, // Usa el viewport como root
        threshold: 0.1, // Activa el autoplay cuando al menos el 10% del slider es visible
      }
    );

    // Observa el elemento del slider
    observer.observe(swiperElement);
  }

  document.addEventListener("DOMContentLoaded", swiperSlider);
  document.addEventListener("astro:after-swap", swiperSlider);
</script>
